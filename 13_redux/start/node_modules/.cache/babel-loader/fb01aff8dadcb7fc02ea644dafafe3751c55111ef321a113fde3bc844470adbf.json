{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { asyncCount } from '../../api/counter';\nconst counter = createSlice({\n  name: 'counter',\n  initialState: {\n    count: 0,\n    status: ''\n  },\n  reducers: {\n    add(state, _ref) {\n      let {\n        type,\n        payload\n      } = _ref;\n      state.count = state.count + payload;\n      // const newState = { ...state };\n      // newState.count = state.count + payload\n      // return newState;\n    },\n\n    minus(state, _ref2) {\n      let {\n        type,\n        payload\n      } = _ref2;\n      state.count = state.count - payload;\n      // const newState = { ...state };\n      // newState.count = state.count - payload\n      // return newState;\n    }\n  },\n\n  extraReducers: builder => {\n    builder.addCase(addAsyncWithStatus.pending, state => {\n      state.status = 'Loading...';\n    }).addCase(addAsyncWithStatus.fulfilled, (state, action) => {\n      state.status = '取得済';\n      state.count += payload;\n    }).addCase(addAsyncWithStatus.rejected, state => {\n      state.status = 'エラー';\n    });\n  }\n});\nconst {\n  add,\n  minus\n} = counter.actions;\nconst addAsyncWithStatus = createAsyncThunk('counter/asyncCount', async payload => {\n  const response = await asyncCount(payload);\n  return response.data;\n});\nconst addAsync = payload => {\n  return async (dispatch, getState) => {\n    const state = getState();\n    console.log(state);\n    const response = await asyncCount(payload);\n    dispatch(add(response.data));\n  };\n};\nexport { add, minus, addAsync, addAsyncWithStatus };\nexport default counter.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","asyncCount","counter","name","initialState","count","status","reducers","add","state","_ref","type","payload","minus","_ref2","extraReducers","builder","addCase","addAsyncWithStatus","pending","fulfilled","action","rejected","actions","response","data","addAsync","dispatch","getState","console","log","reducer"],"sources":["/Users/kim/즐겨찾기/study/유데미/react-guide-material/13_redux/start/src/060_createAsyncThunk/store/modules/counter.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\n\nimport { asyncCount } from '../../api/counter';\n\nconst counter = createSlice({\n  name: 'counter',\n  initialState: {\n    count: 0,\n    status: '',\n  },\n  reducers: {\n    add(state, { type, payload }) {\n      state.count = state.count + payload;\n      // const newState = { ...state };\n      // newState.count = state.count + payload\n      // return newState;\n    },\n    minus(state, { type, payload }) {\n      state.count = state.count - payload;\n      // const newState = { ...state };\n      // newState.count = state.count - payload\n      // return newState;\n    },\n  },\n  extraReducers: builder => {\n    builder\n      .addCase(addAsyncWithStatus.pending, state => {\n        state.status = 'Loading...';\n      })\n      .addCase(addAsyncWithStatus.fulfilled, (state, action) => {\n        state.status = '取得済';\n        state.count += payload;\n      })\n      .addCase(addAsyncWithStatus.rejected, state => {\n        state.status = 'エラー';\n      });\n  },\n});\n\nconst { add, minus } = counter.actions;\n\nconst addAsyncWithStatus = createAsyncThunk(\n  'counter/asyncCount',\n  async payload => {\n    const response = await asyncCount(payload);\n    return response.data;\n  }\n);\n\nconst addAsync = payload => {\n  return async (dispatch, getState) => {\n    const state = getState();\n    console.log(state);\n    const response = await asyncCount(payload);\n    dispatch(add(response.data));\n  };\n};\n\nexport { add, minus, addAsync, addAsyncWithStatus };\nexport default counter.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAEhE,SAASC,UAAU,QAAQ,mBAAmB;AAE9C,MAAMC,OAAO,GAAGF,WAAW,CAAC;EAC1BG,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,KAAK,EAAE,CAAC;IACRC,MAAM,EAAE;EACV,CAAC;EACDC,QAAQ,EAAE;IACRC,GAAGA,CAACC,KAAK,EAAAC,IAAA,EAAqB;MAAA,IAAnB;QAAEC,IAAI;QAAEC;MAAQ,CAAC,GAAAF,IAAA;MAC1BD,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,GAAGO,OAAO;MACnC;MACA;MACA;IACF,CAAC;;IACDC,KAAKA,CAACJ,KAAK,EAAAK,KAAA,EAAqB;MAAA,IAAnB;QAAEH,IAAI;QAAEC;MAAQ,CAAC,GAAAE,KAAA;MAC5BL,KAAK,CAACJ,KAAK,GAAGI,KAAK,CAACJ,KAAK,GAAGO,OAAO;MACnC;MACA;MACA;IACF;EACF,CAAC;;EACDG,aAAa,EAAEC,OAAO,IAAI;IACxBA,OAAO,CACJC,OAAO,CAACC,kBAAkB,CAACC,OAAO,EAAEV,KAAK,IAAI;MAC5CA,KAAK,CAACH,MAAM,GAAG,YAAY;IAC7B,CAAC,CAAC,CACDW,OAAO,CAACC,kBAAkB,CAACE,SAAS,EAAE,CAACX,KAAK,EAAEY,MAAM,KAAK;MACxDZ,KAAK,CAACH,MAAM,GAAG,KAAK;MACpBG,KAAK,CAACJ,KAAK,IAAIO,OAAO;IACxB,CAAC,CAAC,CACDK,OAAO,CAACC,kBAAkB,CAACI,QAAQ,EAAEb,KAAK,IAAI;MAC7CA,KAAK,CAACH,MAAM,GAAG,KAAK;IACtB,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,MAAM;EAAEE,GAAG;EAAEK;AAAM,CAAC,GAAGX,OAAO,CAACqB,OAAO;AAEtC,MAAML,kBAAkB,GAAGnB,gBAAgB,CACzC,oBAAoB,EACpB,MAAMa,OAAO,IAAI;EACf,MAAMY,QAAQ,GAAG,MAAMvB,UAAU,CAACW,OAAO,CAAC;EAC1C,OAAOY,QAAQ,CAACC,IAAI;AACtB,CACF,CAAC;AAED,MAAMC,QAAQ,GAAGd,OAAO,IAAI;EAC1B,OAAO,OAAOe,QAAQ,EAAEC,QAAQ,KAAK;IACnC,MAAMnB,KAAK,GAAGmB,QAAQ,CAAC,CAAC;IACxBC,OAAO,CAACC,GAAG,CAACrB,KAAK,CAAC;IAClB,MAAMe,QAAQ,GAAG,MAAMvB,UAAU,CAACW,OAAO,CAAC;IAC1Ce,QAAQ,CAACnB,GAAG,CAACgB,QAAQ,CAACC,IAAI,CAAC,CAAC;EAC9B,CAAC;AACH,CAAC;AAED,SAASjB,GAAG,EAAEK,KAAK,EAAEa,QAAQ,EAAER,kBAAkB;AACjD,eAAehB,OAAO,CAAC6B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}